# Абстрактный класс
from abc import ABC, abstractmethod

# Определение абстрактного класса
class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

    @abstractmethod
    def perimeter(self):
        pass

# Конкретный класс, реализующий интерфейс
class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def area(self):
        return self.width * self.height

    def perimeter(self):
        return 2 * (self.width + self.height)

# Конкретный класс, реализующий интерфейс
class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius * self.radius

    def perimeter(self):
        return 2 * 3.14 * self.radius

# Функция, использующая абстрактный класс
def print_shape_details(shape):
    print("Площадь:", shape.area())
    print("Периметр:", shape.perimeter())

# Пример использования
rectangle = Rectangle(5, 4)
circle = Circle(3)

print("Прямоугольник:")
print_shape_details(rectangle)

print("\nКруг:")
print_shape_details(circle)
